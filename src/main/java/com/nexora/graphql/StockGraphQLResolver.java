package com.nexora.graphql;

import com.nexora.dto.inventory.ProductDTO;
import com.nexora.dto.inventory.StockDTO;
import com.nexora.dto.inventory.WarehouseDTO;
import com.nexora.service.inventory.ProductService;
import com.nexora.service.inventory.StockService;
import com.nexora.service.inventory.WarehouseService;
import org.springframework.graphql.data.method.annotation.Argument;
import org.springframework.graphql.data.method.annotation.MutationMapping;
import org.springframework.graphql.data.method.annotation.QueryMapping;
import org.springframework.stereotype.Controller;

import java.util.List;
import java.util.UUID;

/**
 * GraphQL resolver for Stock entity.
 */
@Controller
public class StockGraphQLResolver {

    private final StockService stockService;
    private final ProductService productService;
    private final WarehouseService warehouseService;

    public StockGraphQLResolver(StockService stockService, ProductService productService, WarehouseService warehouseService) {
        this.stockService = stockService;
        this.productService = productService;
        this.warehouseService = warehouseService;
    }

    @QueryMapping
    public List<StockDTO> allStocks() {
        return stockService.getAllStocks();
    }

    @QueryMapping
    public StockDTO stockById(@Argument String id) {
        return stockService.getStockById(UUID.fromString(id));
    }

    @QueryMapping
    public List<StockDTO> stocksByProductId(@Argument String productId) {
        return stockService.getStocksByProductId(UUID.fromString(productId));
    }

    @QueryMapping
    public List<StockDTO> stocksByProductCode(@Argument String productCode) {
        return stockService.getStocksByProductCode(productCode);
    }

    @QueryMapping
    public List<StockDTO> stocksByWarehouseId(@Argument String warehouseId) {
        return stockService.getStocksByWarehouseId(UUID.fromString(warehouseId));
    }

    @QueryMapping
    public List<StockDTO> stocksByWarehouseCode(@Argument String warehouseCode) {
        return stockService.getStocksByWarehouseCode(warehouseCode);
    }

    @QueryMapping
    public StockDTO stockByProductAndWarehouse(@Argument String productId, @Argument String warehouseId) {
        return stockService.getStockByProductAndWarehouse(UUID.fromString(productId), UUID.fromString(warehouseId));
    }

    @QueryMapping
    public List<StockDTO> lowStocks() {
        return stockService.getLowStocks();
    }

    @QueryMapping
    public List<StockDTO> overStocks() {
        return stockService.getOverStocks();
    }

    @QueryMapping
    public List<StockDTO> zeroStocks() {
        return stockService.getZeroStocks();
    }

    @MutationMapping
    public StockDTO createStock(@Argument("stock") StockInput input) {
        ProductDTO productDTO = productService.getProductById(UUID.fromString(input.productId()));
        WarehouseDTO warehouseDTO = warehouseService.getWarehouseById(UUID.fromString(input.warehouseId()));

        StockDTO stockDTO = new StockDTO(
                null, // UUID will be generated by the service
                productDTO,
                warehouseDTO,
                input.quantity(),
                input.minStockLevel(),
                input.maxStockLevel(),
                null, // lastRestockDate
                null, // createdAt will be set by service
                null  // updatedAt will be set by service
        );

        return stockService.createStock(stockDTO);
    }

    @MutationMapping
    public StockDTO updateStock(@Argument String id, @Argument("stock") StockInput input) {
        StockDTO existingStock = stockService.getStockById(UUID.fromString(id));

        // Get updated product and warehouse if provided, otherwise use existing ones
        ProductDTO productDTO = input.productId() != null 
                ? productService.getProductById(UUID.fromString(input.productId()))
                : existingStock.product();

        WarehouseDTO warehouseDTO = input.warehouseId() != null
                ? warehouseService.getWarehouseById(UUID.fromString(input.warehouseId()))
                : existingStock.warehouse();

        // Create new StockDTO with updated values
        StockDTO updatedStock = new StockDTO(
                existingStock.uuid(),
                productDTO,
                warehouseDTO,
                input.quantity() != null ? input.quantity() : existingStock.quantity(),
                input.minStockLevel() != null ? input.minStockLevel() : existingStock.minStockLevel(),
                input.maxStockLevel() != null ? input.maxStockLevel() : existingStock.maxStockLevel(),
                existingStock.lastRestockDate(),
                existingStock.createdAt(),
                existingStock.updatedAt()
        );

        return stockService.updateStock(UUID.fromString(id), updatedStock);
    }

    @MutationMapping
    public boolean deleteStock(@Argument String id) {
        stockService.deleteStock(UUID.fromString(id));
        return true;
    }

    @MutationMapping
    public StockDTO addStock(@Argument String id, @Argument int quantity) {
        return stockService.addStock(UUID.fromString(id), quantity);
    }

    @MutationMapping
    public StockDTO removeStock(@Argument String id, @Argument int quantity) {
        return stockService.removeStock(UUID.fromString(id), quantity);
    }
}
